// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageformat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messageformat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chatMes {

namespace {

const ::google::protobuf::Descriptor* hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hello_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messageformat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messageformat_2eproto() {
  protobuf_AddDesc_messageformat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messageformat.proto");
  GOOGLE_CHECK(file != NULL);
  hello_descriptor_ = file->message_type(0);
  static const int hello_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, mestext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, nickname_),
  };
  hello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hello_descriptor_,
      hello::default_instance_,
      hello_offsets_,
      -1,
      -1,
      -1,
      sizeof(hello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messageformat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hello_descriptor_, &hello::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messageformat_2eproto() {
  delete hello::default_instance_;
  delete hello_reflection_;
}

void protobuf_AddDesc_messageformat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_messageformat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023messageformat.proto\022\007chatMes\"<\n\005hello\022"
    "\017\n\007mesText\030\001 \001(\t\022\020\n\010dateTime\030\002 \001(\004\022\020\n\010ni"
    "ckName\030\003 \001(\tb\006proto3", 100);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messageformat.proto", &protobuf_RegisterTypes);
  hello::default_instance_ = new hello();
  hello::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messageformat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messageformat_2eproto {
  StaticDescriptorInitializer_messageformat_2eproto() {
    protobuf_AddDesc_messageformat_2eproto();
  }
} static_descriptor_initializer_messageformat_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hello::kMesTextFieldNumber;
const int hello::kDateTimeFieldNumber;
const int hello::kNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hello::hello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatMes.hello)
}

void hello::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

hello::hello(const hello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatMes.hello)
}

void hello::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mestext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datetime_ = GOOGLE_ULONGLONG(0);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

hello::~hello() {
  // @@protoc_insertion_point(destructor:chatMes.hello)
  SharedDtor();
}

void hello::SharedDtor() {
  mestext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hello_descriptor_;
}

const hello& hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messageformat_2eproto();
  return *default_instance_;
}

hello* hello::default_instance_ = NULL;

hello* hello::New(::google::protobuf::Arena* arena) const {
  hello* n = new hello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hello::Clear() {
// @@protoc_insertion_point(message_clear_start:chatMes.hello)
  mestext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datetime_ = GOOGLE_ULONGLONG(0);
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatMes.hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mesText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mestext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mestext().data(), this->mestext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatMes.hello.mesText"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dateTime;
        break;
      }

      // optional uint64 dateTime = 2;
      case 2: {
        if (tag == 16) {
         parse_dateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datetime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // optional string nickName = 3;
      case 3: {
        if (tag == 26) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chatMes.hello.nickName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatMes.hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatMes.hello)
  return false;
#undef DO_
}

void hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatMes.hello)
  // optional string mesText = 1;
  if (this->mestext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mestext().data(), this->mestext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatMes.hello.mesText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mestext(), output);
  }

  // optional uint64 dateTime = 2;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->datetime(), output);
  }

  // optional string nickName = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatMes.hello.nickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // @@protoc_insertion_point(serialize_end:chatMes.hello)
}

::google::protobuf::uint8* hello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatMes.hello)
  // optional string mesText = 1;
  if (this->mestext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mestext().data(), this->mestext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatMes.hello.mesText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mestext(), target);
  }

  // optional uint64 dateTime = 2;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->datetime(), target);
  }

  // optional string nickName = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chatMes.hello.nickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chatMes.hello)
  return target;
}

int hello::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chatMes.hello)
  int total_size = 0;

  // optional string mesText = 1;
  if (this->mestext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mestext());
  }

  // optional uint64 dateTime = 2;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->datetime());
  }

  // optional string nickName = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatMes.hello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const hello* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatMes.hello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chatMes.hello)
    MergeFrom(*source);
  }
}

void hello::MergeFrom(const hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatMes.hello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mestext().size() > 0) {

    mestext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mestext_);
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
}

void hello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatMes.hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hello::CopyFrom(const hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatMes.hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hello::IsInitialized() const {

  return true;
}

void hello::Swap(hello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hello::InternalSwap(hello* other) {
  mestext_.Swap(&other->mestext_);
  std::swap(datetime_, other->datetime_);
  nickname_.Swap(&other->nickname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hello_descriptor_;
  metadata.reflection = hello_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hello

// optional string mesText = 1;
void hello::clear_mestext() {
  mestext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& hello::mestext() const {
  // @@protoc_insertion_point(field_get:chatMes.hello.mesText)
  return mestext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hello::set_mestext(const ::std::string& value) {
  
  mestext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatMes.hello.mesText)
}
 void hello::set_mestext(const char* value) {
  
  mestext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatMes.hello.mesText)
}
 void hello::set_mestext(const char* value, size_t size) {
  
  mestext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatMes.hello.mesText)
}
 ::std::string* hello::mutable_mestext() {
  
  // @@protoc_insertion_point(field_mutable:chatMes.hello.mesText)
  return mestext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hello::release_mestext() {
  // @@protoc_insertion_point(field_release:chatMes.hello.mesText)
  
  return mestext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hello::set_allocated_mestext(::std::string* mestext) {
  if (mestext != NULL) {
    
  } else {
    
  }
  mestext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mestext);
  // @@protoc_insertion_point(field_set_allocated:chatMes.hello.mesText)
}

// optional uint64 dateTime = 2;
void hello::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 hello::datetime() const {
  // @@protoc_insertion_point(field_get:chatMes.hello.dateTime)
  return datetime_;
}
 void hello::set_datetime(::google::protobuf::uint64 value) {
  
  datetime_ = value;
  // @@protoc_insertion_point(field_set:chatMes.hello.dateTime)
}

// optional string nickName = 3;
void hello::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& hello::nickname() const {
  // @@protoc_insertion_point(field_get:chatMes.hello.nickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hello::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatMes.hello.nickName)
}
 void hello::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatMes.hello.nickName)
}
 void hello::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatMes.hello.nickName)
}
 ::std::string* hello::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chatMes.hello.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hello::release_nickname() {
  // @@protoc_insertion_point(field_release:chatMes.hello.nickName)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hello::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chatMes.hello.nickName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chatMes

// @@protoc_insertion_point(global_scope)
